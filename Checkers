CHECKS_COLOR_1 = 'black'
CHECKS_COLOR_2 = 'white'
CHECKS_COLOR_1_SHORT = CHECKS_COLOR_1[0].upper()
CHECKS_COLOR_2_SHORT = CHECKS_COLOR_2[0].upper()

def set_board(): #sorry for htis
    checks = [[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
              [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
              [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
              [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
              [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
              [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
              [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
              [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]
    return checks

def put_checks_on_an_even_numbers(checks, n, CHECKS_COLOR):
    for number_field in range(len(checks[n])):
        if number_field % 2 != 0:
            checks[n][number_field] = CHECKS_COLOR
    return checks

def put_checks_on_even_numbers(checks, n, CHECKS_COLOR):
    for number_field in range(len(checks[n])):
        if number_field % 2 == 0:
            checks[n][number_field] = CHECKS_COLOR
    return checks

def set_boart_with_figures(checks):
    '''
    Put checks on board. (sorry for my English)

    >>> set_boart_with_figures([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
    [[' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'], ['B', ' ', 'B', ' ', 'B', ' ', 'B', ' '], [' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['W', ' ', 'W', ' ', 'W', ' ', 'W', ' '], [' ', 'W', ' ', 'W', ' ', 'W', ' ', 'W'], ['W', ' ', 'W', ' ', 'W', ' ', 'W', ' ']]

    '''

    n = 0
    while n < len(checks):
        if n % 2 == 0 and n < 3:
            put_checks_on_an_even_numbers(checks, n, CHECKS_COLOR_1_SHORT)
        if n % 2 != 0 and n < 3:
            put_checks_on_even_numbers(checks, n, CHECKS_COLOR_1_SHORT)
        if n % 2 == 0 and n > 4:
            put_checks_on_an_even_numbers(checks, n, CHECKS_COLOR_2_SHORT)
        if n % 2 != 0 and n > 4:
            put_checks_on_even_numbers(checks, n, CHECKS_COLOR_2_SHORT)
        n += 1
    print_board(checks)
    return checks

def print_board(checks):  # must be scary :) sorry for htis to ))
    ind = 8
    print(" " + "+---" * 8 + "+")
    for i in checks:
        print(ind, end='')
        for j in i:
            print('| %s ' % j, end='')
        ind -= 1
        print("|\n" + " " + "+---" * 8 + "+")
    print('   A   B   C   D   E   F   G   H')


checks = set_board()
print_board(checks)

# function to return the color of square taking coordinates (0...7) as arguments
def color_of_square(row, column):
    if row % 2 == 0 and column % 2 == 0 or row % 2 and column % 2:
        return 'white'
    else:
        return 'black'

def return_color_checker(y, x):
    '''
    Checks letters in a given field
    >>> checks = set_boart_with_figures([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
    >>> return_color_checker(0, 1)
    'black'
    >>> return_color_checker(7, 2)
    'white'
    >>> return_color_checker(7, 1)

    '''
    if checks[y][x] == CHECKS_COLOR_1_SHORT:
        return CHECKS_COLOR_1
    elif checks[y][x] == CHECKS_COLOR_2_SHORT:
        return CHECKS_COLOR_2

#function to return direction of motion taking coordinates y, x(0...8, 0...8) as arguments
def direction_of_motion(y, x):
    if return_color_checker(y, x) == CHECKS_COLOR_1:
        y += 1
    elif return_color_checker(y, x) == CHECKS_COLOR_2:
        y -= 1
    return y

def check_falling_into_field(y, x):
    try:
        checks[y][x]
    except IndexError:
        return False
    else:
        return True


#demo function definition to check the possibility of movement on the specified square
def possibility_to_go(y1, x1, y2, x2):
    '''
    check the possibility of movement on the specified square
    >>> checks = set_boart_with_figures([[' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'], ['B', ' ', 'B', ' ', 'B', ' ', 'B', ' '], [' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['W', ' ', 'W', ' ', 'W', ' ', 'W', ' '], [' ', 'W', ' ', 'W', ' ', 'W', ' ', 'W'], ['W', ' ', 'W', ' ', 'W', ' ', 'W', ' ']]
)
    >>> possibility_to_go(2, 1, 3, 1)
    False
    >>> possibility_to_go(2, 1, 1, 0)
    False
    >>> possibility_to_go(1, 0, 2, 1)
    False
    >>> possibility_to_go(2, 1, 3, 0)
    True
    >>> possibility_to_go(2, 1, 4, 3)
    False
    '''

    # y1, x1 coordinates of the beginning of movement
    if checks[y1][x1] == ' ':
        return False
    # y2, x2 coordinates of the endpoints movement
    if check_falling_into_field(y1, x1) and check_falling_into_field(y2, x2):
        if color_of_square(y2, x2) == 'black':
            if direction_of_motion(y1, x1) == y2:
                if abs(x1 - x2) == 1 and y1 == abs(y1) and x1 == abs(x1) and y2 == abs(y2) and x2 == abs(x2):
                    if checks[y2][x2] == ' ':
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False
        else:
            return False
    else:
        return False

#if __name__ == "__main__":
#    import doctest
#    doctest.testmod()
