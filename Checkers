CHECKS_COLOR_1 = 'B'
CHECKS_COLOR_2 = 'W'

def set_board():
    checks = [['O', ' ', 'O', ' ', 'O', ' ', 'O', ' '],
              [' ', 'O', ' ', 'O', ' ', 'O', ' ', 'O'],
              ['O', ' ', 'O', ' ', 'O', ' ', 'O', ' '],
              [' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'],
              ['B', ' ', 'B', ' ', 'B', ' ', 'B', ' '],
              [' ', 'X', ' ', 'X', ' ', 'X', ' ', 'X'],
              ['X', ' ', 'X', ' ', 'X', ' ', 'X', ' '],
              [' ', 'X', ' ', 'X', ' ', 'X', ' ', 'X']]
    return checks

def put_checks_on_an_even_numbers(checks, n, CHECKS_COLOR):
    for number_field in range(len(checks[n])):
        if number_field % 2 != 0:
            checks[n][number_field] = CHECKS_COLOR
    return checks

def put_checks_on_even_numbers(checks, n, CHECKS_COLOR):
    for number_field in range(len(checks[n])):
        if number_field % 2 == 0:
            checks[n][number_field] = CHECKS_COLOR
    return checks

def set_boart_with_figures(checks):
    '''
    Put checks on board. (sorry for my English)

    >>> set_boart_with_figures([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']])
    [[' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'], ['B', ' ', 'B', ' ', 'B', ' ', 'B', ' '], [' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '], ['W', ' ', 'W', ' ', 'W', ' ', 'W', ' '], [' ', 'W', ' ', 'W', ' ', 'W', ' ', 'W'], ['W', ' ', 'W', ' ', 'W', ' ', 'W', ' ']]
    '''

    n = 0
    while n < len(checks):
        if n % 2 == 0 and n < 3:
            put_checks_on_an_even_numbers(checks, n, CHECKS_COLOR_1)
        if n % 2 != 0 and n < 3:
            put_checks_on_even_numbers(checks, n, CHECKS_COLOR_1)
        if n % 2 == 0 and n > 4:
            put_checks_on_an_even_numbers(checks, n, CHECKS_COLOR_2)
        if n % 2 != 0 and n > 4:
            put_checks_on_even_numbers(checks, n, CHECKS_COLOR_2)
        n += 1
    return checks

def print_board(checks):  # must be scary :)
    ind = 1
    print(" " + "+---" * 8 + "+")
    for i in checks:
        print(ind, end='')
        for j in i:
            print('| %s ' % j, end='')
        ind += 1
        print("|\n" + " " + "+---" * 8 + "+")
    print('   A   B   C   D   E   F   G   H')


checkers = set_board()
print_board(checkers)

# function to return the color of square taking coordinates (0...7) as arguments
def color_of_square(row, column):
    if row % 2 == 0 and column % 2 == 0 or row % 2 and column % 2:
        return 'black'
    else:
        return 'white'


def return_color_checker(y, x):
    '''
    Checks letters in a given field
    >>> return_color_checker(0, 1)
    'black'
    >>> return_color_checker(7, 2)
    'white'
    >>> return_color_checker(7, 1)

    '''
    if checks[y][x] == 'B':
        return 'black'
    elif checks[y][x] == 'W':
        return 'white'

#if __name__ == "__main__":
#    import doctest
#    doctest.testmod()
