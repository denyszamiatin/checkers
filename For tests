VAR_MOVEMENTS = ((-1, -1), (-1, 1), (1, 1), (1, -1))
WHITE = 'O'
BLACK = 'X'
import os


def clrscr():
    os.system('cls' if os.name == 'nt' else 'clear')


def set_board():  # Расстановка шашек
    checks = [['O', ' ', 'O', ' ', 'O', ' ', 'O', ' '],  # O - белые, Х - черные, " " - пустые белые,
              [' ', 'O', ' ', 'O', ' ', 'O', ' ', 'O'],  # В - пустые черные
              ['O', ' ', 'O', ' ', 'O', ' ', 'O', ' '],
              [' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'],
              ['B', ' ', 'B', ' ', 'B', ' ', 'B', ' '],
              [' ', 'X', ' ', 'X', ' ', 'X', ' ', 'X'],
              ['X', ' ', 'X', ' ', 'X', ' ', 'X', ' '],
              [' ', 'X', ' ', 'X', ' ', 'X', ' ', 'X']]
    return checks


def print_board(checks):  # must be scary :)    Вывод доски с шахматами(их расположением)
    ind = 1
    print('   A   B   C   D   E   F   G   H')
    print(" " + "+---" * 8 + "+")
    for i in checks:
        print(ind, end='')
        for j in i:
            print('| %s ' % j, end='')
        ind += 1
        print("|", ind - 1, "\n" + " " + "+---" * 8 + "+")
    print('   A   B   C   D   E   F   G   H')


def count_x(checks, x):  # где Х белые или черные. Считает кол-во шашек оставшихся на доске
    count = 0
    for i in checks:  # count checkers
        count += i.count(x)
    return count


def is_black(row, col):
    if (row % 2 == 0 and col % 2 == 0) or (row % 2 == 1 and col % 2 == 1):
        return True
    else:
        return False


def convert():  # Выбор шашки возвращает координаты
    coordinates = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7}
    while True:
        try:
            col = input('Столбец = ').upper()
            row = int(input('Строка = ')) - 1
            if col not in coordinates.keys():
                raise ValueError
            if row > 7:
                raise ValueError
            if row < 0:
                raise ValueError
        except ValueError:
            print('Неправильный ввод')
        except KeyError:
            print('Ужос')
        else:
            col = coordinates[col]
            return row, col


def way_move(color, row, col):  # может шашка походить на 1 клетку вперед для бел. И на 1 назад для чер
    i = 0
    if color == 'O':
        i = 1
    elif color == 'X':
        i = -1
    try:
        if checkers[row + i][col + 1] == "B" or checkers[row + i][col - 1] == 'B':
            return True
    except:
        return False


def way_check(row1, col1, row2, col2, color):  # Правильно собираемся ходить
    if color == 'O':
        if row1 + 1 == row2 and (col1 + 1 == col2 or col1 - 1 == col2):
            return True
        else:
            return False

    elif color == 'X':
        if row1 - 1 == row2 and (col1 + 1 == col2 or col1 - 1 == col2):
            return True
        else:
            return False


def is_fight(color, other_color, checks):  # Есть ли бой для белых other_color - WHITE
    enemy = set()
    for i in range(1, 7):
        for j in range(1, 7):
            if checks[i][j] == color:
                for k in VAR_MOVEMENTS:
                    if checks[i + k[0]][j + k[1]] == other_color and checks[i - k[0]][j - k[1]] == 'B':
                        enemy.add((i, j))
    return enemy


def make_move(color, row, col):
    while True:
        try:
            if is_black(row, col) and way_move(color, row, col) and checkers[row][col] == color:
                print('выбрана шашка')
                break
            else:
                print('нет там шашки')
                row, col = convert()
        except TypeError:
            print('Не правильный ввод')
    while True:
        print('куда будем ходить?')
        try:
            row_end, col_end = convert()
            if way_check(row, col, row_end, col_end, color):
                checkers[row][col], checkers[row_end][col_end] = checkers[row_end][col_end], checkers[row][col]
                break
        except TypeError:
            print('Это куда ж ты ходить так собрался? Пробуй ещеё раз')
        else:
            print('Чёт не хочется мне туда ходить. Попробуй ещё раз')


def fight(beat_check, row, col):
            for i in VAR_MOVEMENTS:
                if (row - i[0], col - i[1]) in beat_check and checkers[row - i[0] * 2][
                            col - i[1] * 2] == 'B':
                    print('Ходим')
                    row_end, col_end = convert()
                    if row_end == row - i[0] * 2 and col_end == col - i[1] * 2:
                        checkers[row][col], checkers[row_end][col_end] = checkers[row_end][col_end], \
                                                                                     checkers[row][col]
                        checkers[row - i[0]][col - i[1]] = 'B'
                        break
                else:
                    continue
###################################################################################################

clrscr()
checkers = set_board()  # расстановка шашек начальная
print_board(checkers)  # вывод доски с шашками
while True:
    beat = is_fight(BLACK, WHITE, checkers)
    if not beat:
        row_begin, col_begin = convert()
        make_move(WHITE, row_begin, col_begin)
        clrscr()
        print_board(checkers)
    else:
        row_begin, col_begin = convert()
        fight(beat, row_begin, col_begin)
        clrscr()
        print_board(checkers)
        if count_x(checkers, BLACK) == 0:
            print('Белые выиграли')
            break
    beat = is_fight(WHITE, BLACK, checkers)
    if not beat:
        row_begin, col_begin = convert()
        make_move(BLACK, row_begin, col_begin)
        clrscr()
        print_board(checkers)
    else:
        row_begin, col_begin = convert()
        fight(beat, row_begin, col_begin)
        clrscr()
        print_board(checkers)
        if count_x(checkers, WHITE) == 0:
            print('Черные выиграли')
            break
